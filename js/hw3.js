// # 1 ======================================


// # 2 ======================================


// # 3 ======================================


// # 4 ======================================


// # 5 ======================================


// # 6 ======================================


// # 7 ======================================



// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ genres —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggy¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.
// const genres = ['Jazz', 'Blues'];
// console.log(genres);
// genres.push('Rock-&-Roll');
// console.log(genres);
// console.log(genres[0]);
// console.log(genres[genres.length - 1]);
// console.log(genres.shift());
// genres.unshift('Country', 'Reggy');
// console.log(genres);

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.
// const values = '8 11';
// let rectangularArea = 0;
// function findRectangularArea(values) {
// 	let array = values.split(" ");
// 	rectangularArea = array[0] * array[1];
// 	return rectangularArea;
// }
// console.log(findRectangularArea(values));

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.
// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// for (let i = 0; i < fruits.length; i += 1) {
// 	const element = fruits[i];
// 	console.log(`#${i + 1} : ${fruits[i]}`);
// }

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö names –∏ phones —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.
// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';
// const namesArr = names.split(',');
// const phonesArr = phones.split(',');

// console.log(namesArr);
// console.log(phonesArr);

// for (let i = 0; i < namesArr.length; i += 1) {
//   console.log(`${namesArr[i]} - ${phonesArr[i]}`);
// }

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = 'Welcome to the future';
// const array = string.split(" ");
// console.log(array);
// const newArray = array.slice(1, array.length - 1);
// console.log(newArray);
// const resultString = newArray.join(" ");
// console.log(resultString);

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
// const string = 'Welcome to the future';
// const array = string.split("");
// let newString = "";
// for (let i = array.length - 1; 0 <= i; i--) {
// 	newString += array[i];
// }
// console.log(newString);

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞.

// –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
// ['c++', 'haskel', 'javascript', 'php', 'python', 'ruby']
// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
// ['c++', 'haskel', 'javascript', 'python', 'php', 'ruby']

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// langs.sort();

// for (let i = 0; i < langs.length; i += 1) {
//   for (let j = i + 1; j < langs.length; j += 1) {
//     if (langs[i][0] > langs[j][0]) {
//       const tmp = langs[i];
//       langs[i] = langs[j];
//       langs[j] = tmp;
//     }
//   }
// }
// console.log(langs);

// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Example 8 - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0];
// for (const number of numbers) {
// 	if(number < min){
// 		min = number;
// 	}
// }
// console.log(min); 


// ::::::::::::::::::::::::::::::::::::: TASK from freeCodeCamp:::::::::::::::::::::::::::::::::::::::::::::::::::::
// –°—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π	–ö–∞—Ä—Ç—ã
// +1	2, 3, 4, 5, 6
// 0	7, 8, 9
// -1	10, ¬´J¬ª, ¬´Q¬ª, ¬´K¬ª, ¬´A¬ª
// –ù–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç. –û–Ω –ø–æ–ª—É—á–∏—Ç card –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –∏ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é count –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã (—Å–º. –¢–∞–±–ª–∏—Ü—É). –ó–∞—Ç–µ–º —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç—á–∏–∫–æ–º –∏ —Å—Ç—Ä–æ–∫—É, Bet–µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∏–ª–∏ Hold–µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ( Bet–∏–ª–∏ Hold) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.

// –ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: -3 Hold –∏–ª–∏ 5 Bet

// –°–æ–≤–µ—Ç
// –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ count–Ω–∞ 0, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 7, 8 –∏–ª–∏ 9.
// –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –º–∞—Å—Å–∏–≤.
// –ù–ï –≤–∫–ª—é—á–∞–π—Ç–µ –≤ –≤—ã–≤–æ–¥ –∫–∞–≤—ã—á–∫–∏ (–æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∏–ª–∏ –¥–≤–æ–π–Ω—ã–µ).

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç 2, 3, 4, 5, 6 –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è 5 Bet

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ 7, 8, 9 –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É 0 Hold

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ 10, J, Q, K, A –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É -5 Hold


// var count = 0;
// let message;
// function cc(card) {
//    switch (card) {
//       case 2:
//       case 3:
//       case 4:
//       case 5:
//       case 6:
//          count += 1;
//          break;
//       case 10:
//       case 'J':
//       case 'Q':
//       case 'K':
//       case 'A':
//          count -= 1;
//          break;
//    }
//    count += count > 0 ? ' BET' : ' HOLD';
//   return count;
// }
// console.log(cc(2));
//  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
// extra - —Å–¥–µ–ª–∞—Ç—å —Ä–µ–≤–µ—Ä—Å –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
// 1. —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
// 2.1 —Ä–∞–∑–±–∏—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
// 2.2 —Ä–µ–≤–µ—Ä—Å–Ω—É—Ç—å
// 2.3 —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
// 3. —Å–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–≤

// emocleW ot eht erutuf

// const string = 'Welcome to the future';
// let word = '';
// let wordsArray = [];
// let array = string.split(" ");
// for (let i = 0; i < array.length; i++) {
//     word = array[i].split("").reverse().join("");
//    wordsArray.push(word);
// }
// let revString = wordsArray.join(" ");
// console.log(revString);
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::